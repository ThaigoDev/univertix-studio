 const analysisForm = document.getElementById('analysisForm');
        const contentInput = document.getElementById('content');
        const loadingDiv = document.getElementById('loading');
        const resultDiv = document.getElementById('result');
        const resultContentDiv = document.getElementById('result-content');
        const errorDiv = document.getElementById('error');
        const submitBtn = document.querySelector('.submit-btn');
        const chartCanvas = document.getElementById('analysisChart');
        let analysisChart = null; // Vari√°vel para armazenar a inst√¢ncia do gr√°fico

        const API_ENDPOINT = 'https://create-caption-app.onrender.com/analise-content';

        const criteriaNames = [
            "Abertura Impactante",
            "Originalidade e Autenticidade",
            "Mensagem Central Clara",
            "Tom de Voz Coerente",
            "Conex√£o com o P√∫blico-Alvo",
            "Chamada para A√ß√£o (CTA)",
            "Identidade Univ√©rtix",
            "Uso inteligente de Emojis e Formata√ß√£o",
            "Hashtags relevantes" // Nome simplificado para o gr√°fico
        ];

        analysisForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const content = contentInput.value.trim();

            if (!content) {
                alert('Por favor, insira o conte√∫do para an√°lise.');
                return;
            }

            // Esconder resultados anteriores e erros, mostrar carregamento
            resultDiv.style.display = 'none';
            errorDiv.style.display = 'none';
            loadingDiv.style.display = 'block';
            submitBtn.disabled = true;

            const analysisPrompt = `
                ‚úÖ üéØ Prompt para an√°lise de conte√∫do (baseado em crit√©rios)
                Analise o conte√∫do abaixo com base nos crit√©rios estabelecidos para legendas/roteiros da Univ√©rtix. Forne√ßa uma avalia√ß√£o cr√≠tica, pontuando os pontos fortes, os pontos de melhoria e sugest√µes pr√°ticas.

                Conte√∫do a ser analisado:
                "${content}"

                üß© Crit√©rios de an√°lise:
                Abertura Impactante:
                A primeira frase prende a aten√ß√£o? Causa surpresa, curiosidade ou emo√ß√£o?

                Originalidade e Autenticidade:
                O texto evita frases clich√™s e previs√≠veis? Ele soa verdadeiro e alinhado ao estilo √∫nico da Univ√©rtix?

                Mensagem Central Clara:
                A ideia principal do conte√∫do est√° clara e bem desenvolvida?

                Tom de Voz Coerente:
                O tom √© leve, ousado, institucional ou emocional, conforme necess√°rio?

                Conex√£o com o P√∫blico-Alvo:
                O conte√∫do conversa com o p√∫blico espec√≠fico de forma assertiva e emp√°tica?

                Chamada para A√ß√£o (CTA):
                O CTA est√° presente, claro e coerente com o conte√∫do?

                Identidade Univ√©rtix:
                O texto expressa valores como ousadia, protagonismo e o lema "feito por voc√™"?

                Uso inteligente de Emojis e Formata√ß√£o:
                Emojis foram usados com prop√≥sito? O uso de caixa alta, quebras e pontua√ß√µes est√° bem estruturado?

                Hashtags relevantes (se aplic√°vel):
                As hashtags s√£o coerentes, estrat√©gicas e agregam valor ao conte√∫do?

                üìù Estrutura da resposta esperada:
                ‚úÖ Resumo geral da an√°lise
                ‚úÖ Pontos fortes destacados
                ‚ö†Ô∏è Oportunidades de melhoria
                ‚úçÔ∏è Sugest√µes pr√°ticas de reescrita (se necess√°rio)

                üìä Pontua√ß√µes dos Crit√©rios (0-5, onde 0 = N√£o atende, 5 = Atende plenamente). POR FAVOR, USE O FORMATO "[N√öMERO]" PARA AS PONTUA√á√ïES:
                Abertura Impactante: [PONTUACAO]
                Originalidade e Autenticidade: [PONTUACAO]
                Mensagem Central Clara: [PONTUACAO]
                Tom de Voz Coerente: [PONTUACAO]
                Conex√£o com o P√∫blico-Alvo: [PONTUACAO]
                Chamada para A√ß√£o (CTA): [PONTUACAO]
                Identidade Univ√©rtix: [PONTUACAO]
                Uso inteligente de Emojis e Formata√ß√£o: [PONTUACAO]
                Hashtags relevantes: [PONTUACAO]

                Responda de forma clara, objetiva e com foco em evolu√ß√£o criativa.
            `;

            try {
                const response = await fetch(API_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ prompt: analysisPrompt })
                });

                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                const fullAnalysis = data.analise;
                console.log("Resposta completa da API:", fullAnalysis); // DEBUG: Verifique a resposta bruta

                // Tenta dividir a resposta entre texto e pontua√ß√µes
                // O split usa "üìä Pontua√ß√µes dos Crit√©rios" para separar. A segunda parte [1] √© a de pontua√ß√µes.
                const parts = fullAnalysis.split('üìä Pontua√ß√µes dos Crit√©rios');
                const textualPart = parts[0];
                const scoresPart = parts.length > 1 ? parts[1] : ''; // Pega a segunda parte se existir, sen√£o vazia
                
                resultContentDiv.innerText = textualPart ? textualPart.trim() : fullAnalysis.trim(); // Exibe a parte textual

                if (scoresPart) {
                    const scores = parseScores(scoresPart);
                    console.log("Pontua√ß√µes extra√≠das:", scores); // DEBUG: Verifique as pontua√ß√µes
                    renderChart(scores);
                } else {
                    console.warn("Se√ß√£o de pontua√ß√µes n√£o encontrada na resposta da API ou est√° vazia.");
                    if (analysisChart) {
                        analysisChart.destroy(); // Destr√≥i o gr√°fico anterior se n√£o h√° novas pontua√ß√µes
                        analysisChart = null;
                    }
                }
                
                resultDiv.style.display = 'block';

            } catch (error) {
                console.error('Erro ao realizar a an√°lise:', error);
                errorDiv.style.display = 'block';
                if (analysisChart) { // Garante que o gr√°fico √© destru√≠do em caso de erro tamb√©m
                    analysisChart.destroy();
                    analysisChart = null;
                }
            } finally {
                loadingDiv.style.display = 'none';
                submitBtn.disabled = false;
            }
        });

        /**
         * Tenta extrair as pontua√ß√µes de um texto.
         * Suporta formatos como "Crit√©rio: [5]" ou "Crit√©rio: 4".
         */
        function parseScores(scoresText) {
            const scores = {};
            const lines = scoresText.split('\n').filter(line => line.trim() !== '');

            lines.forEach(line => {
                // Regex mais flex√≠vel: procura por "Texto: N√öMERO" com ou sem colchetes opcionais ao redor do n√∫mero.
                const match = line.match(/(.+):\s*\[?(\d+)\]?/); 
                if (match) {
                    const criterionRaw = match[1].trim();
                    const score = parseInt(match[2], 10);
                    
                    // Encontra o nome do crit√©rio correspondente na lista predefinida (criteriaNames)
                    const foundCriterion = criteriaNames.find(name => criterionRaw.includes(name));
                    
                    if (foundCriterion) {
                        scores[foundCriterion] = score;
                    } else if (criterionRaw.includes('Hashtags relevantes')) {
                        // Tratamento espec√≠fico para "Hashtags relevantes (se aplic√°vel)" que pode vir simplificado
                        scores['Hashtags relevantes'] = score;
                    }
                }
            });
            return scores;
        }

        function renderChart(scores) {
            // Mapeia os crit√©rios para seus valores, usando 0 se a pontua√ß√£o n√£o for encontrada
            const dataValues = criteriaNames.map(criterion => scores[criterion] || 0);
            console.log("Valores para o gr√°fico (dataValues):", dataValues); // DEBUG: Verifique se os dados est√£o corretos para o Chart.js

            // Se j√° existe um gr√°fico, destrua-o para evitar sobreposi√ß√£o
            if (analysisChart) {
                analysisChart.destroy();
            }

            analysisChart = new Chart(chartCanvas, {
                type: 'radar',
                data: {
                    labels: criteriaNames,
                    datasets: [{
                        label: 'Pontua√ß√£o',
                        data: dataValues,
                        backgroundColor: 'rgba(102, 126, 234, 0.4)',
                        borderColor: '#667eea',
                        borderWidth: 2,
                        pointBackgroundColor: '#764ba2',
                        pointBorderColor: '#fff',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: '#764ba2'
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            angleLines: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            },
                            pointLabels: {
                                color: '#333',
                                font: {
                                    size: 12
                                }
                            },
                            suggestedMin: 0,
                            suggestedMax: 5,
                            ticks: {
                                stepSize: 1,
                                color: '#555',
                                backdropColor: 'rgba(255, 255, 255, 0.7)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            display: false // N√£o exibir a legenda "Pontua√ß√£o"
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.label + ': ' + context.raw;
                                }
                            }
                        }
                    }
                }
            });
        }

        function copyResult() {
            const textToCopy = resultContentDiv.innerText;
            navigator.clipboard.writeText(textToCopy)
                .then(() => {
                    alert('An√°lise copiada para a √°rea de transfer√™ncia!');
                })
                .catch(err => {
                    console.error('Erro ao copiar: ', err);
                    alert('Erro ao copiar a an√°lise.');
                });
        }