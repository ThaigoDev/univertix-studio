const analysisForm = document.getElementById('analysisForm');
const contentInput = document.getElementById('content');
const loadingDiv = document.getElementById('loading');
const resultDiv = document.getElementById('result');
const resultContentDiv = document.getElementById('result-content'); // Este div mostrar√° o texto completo da an√°lise
const errorDiv = document.getElementById('error');
const submitBtn = document.querySelector('.submit-btn');
const chartCanvas = document.getElementById('analysisChart');
const progressionChartCanvas = document.getElementById('progressionChart');

// Elementos para as novas se√ß√µes
const keywordsList = document.getElementById('keywordsList');
const sentimentText = document.getElementById('sentimentText');
const readabilityText = document.getElementById('readabilityText');
const titlesList = document.getElementById('titlesList');
const toneText = document.getElementById('toneText');

// Se√ß√µes pai para controle de exibi√ß√£o
const keywordsSection = document.getElementById('keywordsSection');
const sentimentSection = document.getElementById('sentimentSection');
const readabilitySection = document.getElementById('readabilitySection');
const titlesSection = document.getElementById('titlesSection');
const toneSection = document.getElementById('toneSection');


let analysisChart = null;
let progressionChart = null;

// Confirme que esta URL √© o endpoint correto da sua API no Render.com
const API_ENDPOINT = 'https://create-caption-app.onrender.com/analise-content';

const criteriaNames = [
    "Abertura Impactante",
    "Originalidade e Autenticidade",
    "Mensagem Central Clara",
    "Tom de Voz Coerente",
    "Conex√£o com o P√∫blico-Alvo",
    "Chamada para A√ß√£o (CTA)",
    "Identidade Univ√©rtix",
    "Uso inteligente de Emojis e Formata√ß√£o",
    "Hashtags relevantes"
];

analysisForm.addEventListener('submit', async (e) => {
    e.preventDefault(); // Impede o recarregamento da p√°gina

    const content = contentInput.value.trim();

    if (!content) {
        alert('Por favor, insira o conte√∫do para an√°lise.');
        return;
    }

    // Esconde resultados/erros anteriores e mostra o carregamento
    resultDiv.style.display = 'none';
    errorDiv.style.display = 'none';
    loadingDiv.style.display = 'block';
    submitBtn.disabled = true; // Desabilita o bot√£o para evitar m√∫ltiplos envios

    // O prompt foi desenhado para sua API retornar o texto e as pontua√ß√µes no formato esperado
    // Adicionamos instru√ß√µes para as novas an√°lises.
    const analysisPrompt = `
        ‚úÖ üéØ Prompt para an√°lise de conte√∫do (baseado em crit√©rios)
        Analise o conte√∫do abaixo com base nos crit√©rios estabelecidos para legendas/roteiros da Univ√©rtix. Forne√ßa uma avalia√ß√£o cr√≠tica, pontuando os pontos fortes, os pontos de melhoria e sugest√µes pr√°ticas.

        Conte√∫do a ser analisado:
        "${content}"

        üß© Crit√©rios de an√°lise:
        Abertura Impactante:
        A primeira frase prende a aten√ß√£o? Causa surpresa, curiosidade ou emo√ß√£o?

        Originalidade e Autenticidade:
        O texto evita frases clich√™s e previs√≠veis? Ele soa verdadeiro e alinhado ao estilo √∫nico da Univ√©rtix?

        Mensagem Central Clara:
        A ideia principal do conte√∫do est√° clara e bem desenvolvida?

        Tom de Voz Coerente:
        O tom √© leve, ousado, institucional ou emocional, conforme necess√°rio?

        Conex√£o com o P√∫blico-Alvo:
        O conte√∫do conversa com o p√∫blico espec√≠fico de forma assertiva e emp√°tica?

        Chamada para A√ß√£o (CTA):
        O CTA est√° presente, claro e coerente com o conte√∫do?

        Identidade Univ√©rtix:
        O texto expressa valores como ousadia, protagonismo e o lema "feito por voc√™"?

        Uso inteligente de Emojis e Formata√ß√£o:
        Emojis foram usados com prop√≥sito? O uso de caixa alta, quebras e pontua√ß√µes est√° bem estruturado?

        Hashtags relevantes (se aplic√°vel):
        As hashtags s√£o coerentes, estrat√©gicas e agregam valor ao conte√∫do?

        üìù Estrutura da resposta esperada:
        ‚úÖ Resumo geral da an√°lise
        ‚úÖ Pontos fortes destacados
        ‚ö†Ô∏è Oportunidades de melhoria
        ‚úçÔ∏è Sugest√µes pr√°ticas de reescrita (se necess√°rio)

        üìä Pontua√ß√µes dos Crit√©rios (0-5, onde 0 = N√£o atende, 5 = Atende plenamente). PARA CADA CRIT√âRIO, RETORNE APENAS O N√öMERO ENTRE COLCHETES. Exemplo: Abertura Impactante: [4]
        Abertura Impactante: [PONTUACAO]
        Originalidade e Autenticidade: [PONTUACAO]
        Mensagem Central Clara: [PONTUACAO]
        Tom de Voz Coerente: [PONTUACAO]
        Conex√£o com o P√∫blico-Alvo: [PONTUACAO]
        Chamada para A√ß√£o (CTA): [PONTUACAO]
        Identidade Univ√©rtix: [PONTUACAO]
        Uso inteligente de Emojis e Formata√ß√£o: [PONTUACAO]
        Hashtags relevantes: [PONTUACAO]

        üìà Potencial de Alcance Estimado:
        Qual a probabilidade percentual (0-100%) deste conte√∫do atingir seu p√∫blico-alvo e gerar engajamento significativo? RETORNE APENAS O N√öMERO ENTRE COLCHETES SEGUIDO DO SINAL DE PORCENTAGEM. Exemplo: [65]%
        [PERCENTUAL]%

        --- NOVAS AN√ÅLISES ---

        üîë Palavras-chave e Relev√¢ncia:
        Por favor, liste 3-5 palavras-chave principais do conte√∫do e sua relev√¢ncia percebida para o tema e p√∫blico-alvo (Baixa, M√©dia, Alta).
        Exemplo:
        - PALAVRA1: Relev√¢ncia
        - PALAVRA2: Relev√¢ncia

        üòä Sentimento do Conte√∫do:
        Classifique o sentimento geral predominante no texto (Positivo, Neutro, Negativo) e estime sua intensidade em porcentagem (0-100%).
        Exemplo: SENTIMENTO (PORCENTAGEM%)

        üìö N√≠vel de Leitura:
        Estime a facilidade de leitura do conte√∫do (F√°cil, M√©dio, Complexo) e forne√ßa um √≠ndice num√©rico de legibilidade (escala de 0-100, onde maior √© mais f√°cil de ler, ou equivalente ao Flesch-Kincaid Grade Level).
        Exemplo: N√çVEL (Pontua√ß√£o: NUMERO)

        ‚ú® T√≠tulos Sugeridos:
        Gere 3 sugest√µes de t√≠tulos alternativos e otimizados para este conte√∫do, pensando em engajamento.
        Exemplo:
        1. SUGEST√ÉO 1
        2. SUGEST√ÉO 2
        3. SUGEST√ÉO 3

        üé≠ Varia√ß√£o de Tom:
        Descreva brevemente a varia√ß√£o de tom presente no conte√∫do, se houver, ou se o tom √© consistente. Identifique se h√° momentos de tom mais formal, informal, inspirador, informativo, etc.
        Exemplo: O tom √© predominantemente informativo, mas transita para um tom inspirador no final para o CTA.

        Responda de forma clara, objetiva e com foco em evolu√ß√£o criativa.
    `;

    try {
        const response = await fetch(API_ENDPOINT, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ prompt: analysisPrompt })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        const fullAnalysis = data.analise;
        console.log("Resposta completa da API:", fullAnalysis); // √ìtimo para depura√ß√£o!

        // Extrai todas as informa√ß√µes da string completa
        const results = parseAnalysisResults(fullAnalysis);

        // Exibe o texto completo da an√°lise (incluindo as partes de pontua√ß√£o)
        resultContentDiv.innerText = fullAnalysis.trim();

        // Renderiza o gr√°fico de radar se houver pontua√ß√µes v√°lidas
        if (Object.keys(results.scores).length > 0) {
            console.log("Pontua√ß√µes extra√≠das para o gr√°fico de Radar:", results.scores);
            renderChart(results.scores);
        } else {
            console.warn("Nenhuma pontua√ß√£o de crit√©rio encontrada. O gr√°fico de radar n√£o ser√° renderizado.");
            if (analysisChart) { analysisChart.destroy(); analysisChart = null; }
        }

        // Renderiza o gr√°fico de progress√£o se o potencial de alcance for v√°lido
        if (results.progression !== null) {
            console.log("Potencial de Alcance extra√≠do para o gr√°fico de Progress√£o:", results.progression);
            renderProgressionChart(results.progression);
        } else {
            console.warn("N√£o foi poss√≠vel extrair o Potencial de Alcance. O gr√°fico de progress√£o n√£o ser√° renderizado.");
            if (progressionChart) { progressionChart.destroy(); progressionChart = null; }
        }

        // Renderiza as novas se√ß√µes
        renderNewSections(results);

        resultDiv.style.display = 'block'; // Mostra a se√ß√£o de resultados

    } catch (error) {
        console.error('Erro ao realizar a an√°lise:', error);
        errorDiv.style.display = 'block'; // Mostra a mensagem de erro
        // Garante que os gr√°ficos anteriores sejam destru√≠dos em caso de erro
        if (analysisChart) { analysisChart.destroy(); analysisChart = null; }
        if (progressionChart) { progressionChart.destroy(); progressionChart = null; }
        hideNewSections(); // Esconde as novas se√ß√µes em caso de erro
    } finally {
        loadingDiv.style.display = 'none'; // Esconde o spinner de carregamento
        submitBtn.disabled = false; // Reabilita o bot√£o
    }
});

/**
 * Fun√ß√£o para extrair todas as informa√ß√µes relevantes do texto completo da an√°lise.
 */
function parseAnalysisResults(text) {
    const results = {
        scores: {},
        progression: null,
        keywords: [],
        sentiment: { text: null, percentage: null },
        readability: { level: null, score: null },
        suggestedTitles: [],
        toneVariation: null
    };

    // 1. Pontua√ß√µes dos Crit√©rios
    // Esta regex foi ajustada para ser mais robusta, capturando qualquer texto at√© o ':'
    // e depois o n√∫mero entre colchetes (opcionalmente) ou o n√∫mero direto.
    const scoreMatches = text.matchAll(/(.*?):\s*\[?(\d+)\]?/g);
    for (const match of scoreMatches) {
        const criterionRaw = match[1]?.trim();
        const score = parseInt(match[2], 10);
        const foundCriterion = criteriaNames.find(name => criterionRaw.includes(name));
        if (foundCriterion) {
            results.scores[foundCriterion] = score;
        }
    }

    // 2. Potencial de Alcance Estimado (regex anterior, que j√° lida com aspas e texto intermedi√°rio)
    // A regex foi ligeiramente ajustada para capturar o grupo principal de maneira mais direta se aspas n√£o forem mais problema.
    // Se o problema das aspas voltar, use: `.*?("?\[?(\d+)%\]?"?)/s` e `progressionMatch[2]`
    const progressionMatch = text.match(/Potencial de Alcance Estimado:.*?\[?(\d+)%\]?/s);
    if (progressionMatch && progressionMatch[1]) {
        results.progression = parseInt(progressionMatch[1], 10);
    }


    // 3. Palavras-chave e Relev√¢ncia
    const keywordsSectionMatch = text.match(/üîë Palavras-chave e Relev√¢ncia:\s*([\s\S]*?)(?=\n\nüòä Sentimento do Conte√∫do:|\n\nüìö N√≠vel de Leitura:|\n\n‚ú® T√≠tulos Sugeridos:|\n\nüé≠ Varia√ß√£o de Tom:|\n---|$)/);
    if (keywordsSectionMatch && keywordsSectionMatch[1]) {
        const keywordLines = keywordsSectionMatch[1].trim().split('\n');
        results.keywords = keywordLines.map(line => {
            const parts = line.match(/-\s*(.*?):\s*(.*)/); // Ex: - PALAVRA1: Relev√¢ncia
            if (parts && parts[1] && parts[2]) {
                return { keyword: parts[1].trim(), relevance: parts[2].trim() };
            }
            return null;
        }).filter(Boolean); // Remove null entries
    }

    // 4. Sentimento do Conte√∫do
    const sentimentMatch = text.match(/üòä Sentimento do Conte√∫do:\s*(.+?)\s*\((\d+)%\)/); // Ex: SENTIMENTO (PORCENTAGEM%)
    if (sentimentMatch && sentimentMatch[1] && sentimentMatch[2]) {
        results.sentiment.text = sentimentMatch[1].trim();
        results.sentiment.percentage = parseInt(sentimentMatch[2], 10);
    }

    // 5. N√≠vel de Leitura (Legibilidade)
    const readabilityMatch = text.match(/üìö N√≠vel de Leitura:\s*(.+?)\s*\(Pontua√ß√£o:\s*(\d+)\)/); // Ex: N√çVEL (Pontua√ß√£o: NUMERO)
    if (readabilityMatch && readabilityMatch[1] && readabilityMatch[2]) {
        results.readability.level = readabilityMatch[1].trim();
        results.readability.score = parseInt(readabilityMatch[2], 10);
    }

    // 6. T√≠tulos Sugeridos
    const titlesSectionMatch = text.match(/‚ú® T√≠tulos Sugeridos:\s*([\s\S]*?)(?=\n\nüé≠ Varia√ß√£o de Tom:|\n---|$)/);
    if (titlesSectionMatch && titlesSectionMatch[1]) {
        const titleLines = titlesSectionMatch[1].trim().split('\n');
        results.suggestedTitles = titleLines.map(line => {
            const parts = line.match(/\d+\.\s*(.*)/); // Ex: 1. SUGEST√ÉO 1
            return parts && parts[1] ? parts[1].trim() : null;
        }).filter(Boolean);
    }

    // 7. Varia√ß√£o de Tom
    // Captura o texto ap√≥s "üé≠ Varia√ß√£o de Tom:" at√© o final da string ou a pr√≥xima se√ß√£o "---"
    const toneVariationMatch = text.match(/üé≠ Varia√ß√£o de Tom:\s*([\s\S]*?)(?=\n---|$)/);
    if (toneVariationMatch && toneVariationMatch[1]) {
        results.toneVariation = toneVariationMatch[1].trim();
    }


    return results;
}

/**
 * Renderiza o gr√°fico de radar com as pontua√ß√µes dos crit√©rios.
 */
function renderChart(scores) {
    const dataValues = criteriaNames.map(criterion => scores[criterion] || 0);

    if (analysisChart) {
        analysisChart.destroy();
    }

    analysisChart = new Chart(chartCanvas, {
        type: 'radar',
        data: {
            labels: criteriaNames,
            datasets: [{
                label: 'Pontua√ß√£o',
                data: dataValues,
                backgroundColor: 'rgba(102, 126, 234, 0.4)',
                borderColor: '#667eea',
                borderWidth: 2,
                pointBackgroundColor: '#764ba2',
                pointBorderColor: '#fff',
                pointHoverBackgroundColor: '#fff',
                pointHoverBorderColor: '#764ba2'
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
                r: {
                    angleLines: { color: 'rgba(0, 0, 0, 0.1)' },
                    grid: { color: 'rgba(0, 0, 0, 0.1)' },
                    pointLabels: {
                        color: '#333',
                        font: { size: 12 }
                    },
                    suggestedMin: 0,
                    suggestedMax: 5,
                    ticks: {
                        stepSize: 1,
                        color: '#555',
                        backdropColor: 'rgba(255, 255, 255, 0.7)'
                    }
                }
            },
            plugins: {
                legend: { display: false },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return context.label + ': ' + context.raw;
                        }
                    }
                }
            }
        }
    });
}

/**
 * Renderiza o gr√°fico de barra para o potencial de alcance.
 */
function renderProgressionChart(progression) {
    if (progressionChart) {
        progressionChart.destroy();
    }

    progressionChart = new Chart(progressionChartCanvas, {
        type: 'bar',
        data: {
            labels: ['Potencial de Alcance'],
            datasets: [{
                label: 'Porcentagem',
                data: [progression],
                backgroundColor: ['rgba(40, 167, 69, 0.7)'],
                borderColor: ['rgba(40, 167, 69, 1)'],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            indexAxis: 'y', // Gr√°fico de barras horizontal
            scales: {
                x: {
                    beginAtZero: true,
                    max: 100, // Limite m√°ximo 100%
                    ticks: {
                        callback: function(value) {
                            return value + '%'; // Adiciona '%' nos r√≥tulos do eixo X
                        }
                    }
                },
                y: {
                    grid: {
                        display: false // Oculta as linhas da grade do eixo Y
                    }
                }
            },
            plugins: {
                legend: { display: false },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            return context.dataset.label + ': ' + context.raw + '%';
                        }
                    }
                }
            }
        }
    });
}

/**
 * Renderiza as novas se√ß√µes de an√°lise no HTML.
 */
function renderNewSections(results) {
    // Palavras-chave
    if (results.keywords && results.keywords.length > 0) {
        keywordsList.innerHTML = ''; // Limpa a lista anterior
        results.keywords.forEach(item => {
            const li = document.createElement('li');
            li.textContent = `${item.keyword}: ${item.relevance}`;
            keywordsList.appendChild(li);
        });
        keywordsSection.style.display = 'block';
    } else {
        keywordsSection.style.display = 'none';
    }

    // Sentimento
    if (results.sentiment.text) {
        sentimentText.textContent = `${results.sentiment.text} (${results.sentiment.percentage || 'N/A'}%)`;
        sentimentSection.style.display = 'block';
    } else {
        sentimentSection.style.display = 'none';
    }

    // N√≠vel de Leitura
    if (results.readability.level) {
        readabilityText.textContent = `${results.readability.level} (Pontua√ß√£o: ${results.readability.score || 'N/A'})`;
        readabilitySection.style.display = 'block';
    } else {
        readabilitySection.style.display = 'none';
    }

    // T√≠tulos Sugeridos
    if (results.suggestedTitles && results.suggestedTitles.length > 0) {
        titlesList.innerHTML = ''; // Limpa a lista anterior
        results.suggestedTitles.forEach(title => {
            const li = document.createElement('li');
            li.textContent = title;
            titlesList.appendChild(li);
        });
        titlesSection.style.display = 'block';
    } else {
        titlesSection.style.display = 'none';
    }

    // Varia√ß√£o de Tom
    if (results.toneVariation) {
        toneText.textContent = results.toneVariation;
        toneSection.style.display = 'block';
    } else {
        toneSection.style.display = 'none';
    }
}

/**
 * Esconde todas as novas se√ß√µes de an√°lise.
 */
function hideNewSections() {
    keywordsSection.style.display = 'none';
    sentimentSection.style.display = 'none';
    readabilitySection.style.display = 'none';
    titlesSection.style.display = 'none';
    toneSection.style.display = 'none';
}


/**
 * Copia o texto da an√°lise para a √°rea de transfer√™ncia.
 */
function copyResult() {
    const textToCopy = resultContentDiv.innerText;
    navigator.clipboard.writeText(textToCopy)
        .then(() => {
            alert('An√°lise copiada para a √°rea de transfer√™ncia!');
        })
        .catch(err => {
            console.error('Erro ao copiar: ', err);
            alert('Erro ao copiar a an√°lise.');
        });
}